# name of our workflow
name: FastAPI CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request
  pull_request:
    branches:
      - '**'
  # any code pushed
  push:
    branches:
      - '**'

# three job definition
jobs:
  # Health check job for testing and code formatting check
  health-check-job:
    runs-on: ubuntu-latest # os for running the job

    strategy:
      matrix:
        python-version: [ 3.12, ]

    env:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_HOST: localhost # default host value for the database
      POSTGRES_DB: currency_converter
      POSTGRES_PORT: 5432
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@localhost:5432/currency_converter
      API_KEY_RATE: ${{ secrets.API_KEY_RATE }}

    services:
      postgres_main:
        image: postgres
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 5

    steps:
      - name: Checkout repository # checking out the code at current commit that triggers the workflow
        uses: actions/checkout@v3
      - name: Setup python environment # setting python environment to 3.x
        uses: actions/setup-python@v3
        with:
          python-version: '3.12' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
      - name: Check Python version # checking the python version to see if 3.x is installed.
        run: python --version
      - name: Upgrade Pip # check and upgrade Pip
        run: python -m pip install --upgrade pip
      - name: Install Poetry # install Poetry
        run: |
          pip install poetry
          poetry self update
      - name: Install dependencies # install application dependencies
        run: |
          poetry install
          poetry add alembic python-dotenv fastapi freecurrencyapi pydantic-settings asyncpg sqlmodel pytest-cov
      - name: Check Syntax with pycodestyle
        run: |
          poetry add pycodestyle
          poetry run pycodestyle --exclude=./src/alembic --statistics --max-line-length=500 .
      - name: Check syntax with flake8
        run: | 
          poetry add flake8
          poetry run flake8
      - name: Create .env
        run: |
          touch ./.env
          echo DEBUG=True >> ./.env
          echo SECRET_KEY=${{ env.SECRET_KEY }} >> ./.env
          echo DATABASE_URL=${{ env.DATABASE_URL }} >> ./.env
          echo API_KEY_RATE=${{ env.API_KEY_RATE }} >> ./.env
      - name: Apply migrations
        run: |
          cd ./src
          poetry run alembic upgrade head
      - name: Run tests # run tests
        run: |
          poetry run pytest ./src --cov=app --cov-report=xml --junitxml=junit/test-results.xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4.0.1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          slug: IvanGorbunov/fast_api_currency_exchanger
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: junit/test-results.xml
